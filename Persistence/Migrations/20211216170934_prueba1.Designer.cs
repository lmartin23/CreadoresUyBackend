// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Context;

namespace Persistence.Migrations
{
    [DbContext(typeof(CreadoresUyDbContext))]
    [Migration("20211216170934_prueba1")]
    partial class prueba1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Share.Entities.BanckAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountHolder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("AccountNumber")
                        .HasColumnType("bigint");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("FinancialEntityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId")
                        .IsUnique();

                    b.HasIndex("FinancialEntityId");

                    b.ToTable("BanckAccounts");
                });

            modelBuilder.Entity("Share.Entities.Benefit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdPlan")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdPlan");

                    b.ToTable("Benefit");
                });

            modelBuilder.Entity("Share.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Share.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("IdCreator")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdCreator");

                    b.HasIndex("IdUser");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("Share.Entities.Content", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dato")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(20000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Draft")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Content");
                });

            modelBuilder.Entity("Share.Entities.ContentPlan", b =>
                {
                    b.Property<int>("IdContent")
                        .HasColumnType("int");

                    b.Property<int>("IdPlan")
                        .HasColumnType("int");

                    b.HasKey("IdContent", "IdPlan");

                    b.HasIndex("IdPlan");

                    b.ToTable("ContentPlans");
                });

            modelBuilder.Entity("Share.Entities.ContentTag", b =>
                {
                    b.Property<int>("IdTag")
                        .HasColumnType("int");

                    b.Property<int>("IdContent")
                        .HasColumnType("int");

                    b.HasKey("IdTag", "IdContent");

                    b.HasIndex("IdContent");

                    b.ToTable("ContentTags");
                });

            modelBuilder.Entity("Share.Entities.Creator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BanckAccountId")
                        .HasColumnType("int");

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatorCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("Followers")
                        .HasColumnType("int");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WelcomeMsg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YoutubeLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorName")
                        .IsUnique();

                    b.ToTable("Creator");
                });

            modelBuilder.Entity("Share.Entities.DefaultBenefit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdDefaultPlan")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdDefaultPlan");

                    b.ToTable("DefaultBenefits");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Deleted = false,
                            Description = "Contenidos Libres",
                            IdDefaultPlan = 1
                        },
                        new
                        {
                            Id = 2,
                            Deleted = false,
                            Description = "Todas los meses un contenido libre ",
                            IdDefaultPlan = 1
                        },
                        new
                        {
                            Id = 3,
                            Deleted = false,
                            Description = "Plan Basico Free + Contenidos Exclusivos",
                            IdDefaultPlan = 2
                        },
                        new
                        {
                            Id = 4,
                            Deleted = false,
                            Description = "Todas las semanas contenidos nuevos",
                            IdDefaultPlan = 2
                        },
                        new
                        {
                            Id = 5,
                            Deleted = false,
                            Description = "Todos los dias contenidos nuevos",
                            IdDefaultPlan = 3
                        },
                        new
                        {
                            Id = 6,
                            Deleted = false,
                            Description = "Plan Estandar + Contenidos Exclusivos",
                            IdDefaultPlan = 3
                        },
                        new
                        {
                            Id = 7,
                            Deleted = false,
                            Description = "Chat",
                            IdDefaultPlan = 3
                        });
                });

            modelBuilder.Entity("Share.Entities.DefaultPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("SubscriptionMsg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WelcomeVideoLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DefaultPlans");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Deleted = false,
                            Description = "Plan Basico Free",
                            Image = "https://firebasestorage.googleapis.com/v0/b/creadoresuy-674c1.appspot.com/o/Planes%2Fplan%20b.png?alt=media&token=e843ca33-19d8-4cd4-ba4d-342d9c798572",
                            Name = "Basico",
                            Price = 0f,
                            SubscriptionMsg = "Bienvenidos a tod@s",
                            WelcomeVideoLink = "tuVideo.com"
                        },
                        new
                        {
                            Id = 2,
                            Deleted = false,
                            Description = "Plan Estandar ",
                            Image = "https://firebasestorage.googleapis.com/v0/b/creadoresuy-674c1.appspot.com/o/Planes%2Fplan%20e.png?alt=media&token=1525fdd8-8bcc-4666-b000-65de46fbdda9",
                            Name = "Estandar",
                            Price = 150f,
                            SubscriptionMsg = "Bienvenidos a tod@s",
                            WelcomeVideoLink = "tuVideo.com"
                        },
                        new
                        {
                            Id = 3,
                            Deleted = false,
                            Description = "Plan Premium",
                            Image = "https://firebasestorage.googleapis.com/v0/b/creadoresuy-674c1.appspot.com/o/Planes%2Fplan%20p.jfif?alt=media&token=a5d3cfa1-864e-4e4a-9831-caa1b2ea83a6",
                            Name = "Premium",
                            Price = 350f,
                            SubscriptionMsg = "Bienvenidos a tod@s",
                            WelcomeVideoLink = "tuVideo.com"
                        });
                });

            modelBuilder.Entity("Share.Entities.FinancialEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Phone")
                        .HasMaxLength(12)
                        .HasColumnType("int");

                    b.Property<int>("RUT")
                        .HasMaxLength(12)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FinancialEntity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "URY",
                            Deleted = false,
                            Name = "BROU",
                            Phone = 8001234,
                            RUT = 147523001
                        },
                        new
                        {
                            Id = 2,
                            Country = "URY",
                            Deleted = false,
                            Name = "ITAU",
                            Phone = 8002345,
                            RUT = 258634112
                        },
                        new
                        {
                            Id = 3,
                            Country = "URY",
                            Deleted = false,
                            Name = "SANTANDER",
                            Phone = 8003456,
                            RUT = 369745223
                        },
                        new
                        {
                            Id = 4,
                            Country = "URY",
                            Deleted = false,
                            Name = "BBVA",
                            Phone = 8004567,
                            RUT = 470856334
                        },
                        new
                        {
                            Id = 5,
                            Country = "URY",
                            Deleted = false,
                            Name = "SCOTIABANK",
                            Phone = 8005678,
                            RUT = 581967445
                        });
                });

            modelBuilder.Entity("Share.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("IdChat")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("Sended")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoEmisor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdChat");

                    b.HasIndex("IdUser");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Share.Entities.PagoCreador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AdeedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("IdCreator")
                        .HasColumnType("int");

                    b.Property<int>("IdPayment")
                        .HasColumnType("int");

                    b.Property<string>("Nickname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PayDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Pending")
                        .HasColumnType("bit");

                    b.Property<string>("PlanName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdPayment");

                    b.ToTable("PagosCreador");
                });

            modelBuilder.Entity("Share.Entities.PagoPlataforma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AdeedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("IdPayment")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdPayment");

                    b.ToTable("PagosPlataforma");
                });

            modelBuilder.Entity("Share.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Expired")
                        .HasColumnType("bit");

                    b.Property<string>("ExternalPaymentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NickName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PaymentAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserPlanIdP")
                        .HasColumnType("int");

                    b.Property<int>("UserPlanIdU")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserPlanIdP", "UserPlanIdU");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Share.Entities.Plan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("SubscriptionMsg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WelcomeVideoLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("Share.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Share.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgProfile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LasLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId")
                        .IsUnique()
                        .HasFilter("[CreatorId] IS NOT NULL");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Share.Entities.UserCreator", b =>
                {
                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<int>("IdCreator")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFollow")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUnfollow")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Unfollow")
                        .HasColumnType("bit");

                    b.HasKey("IdUser", "IdCreator");

                    b.HasIndex("IdCreator");

                    b.ToTable("UserCreators");
                });

            modelBuilder.Entity("Share.Entities.UserPlan", b =>
                {
                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<int>("IdPlan")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SusbscriptionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdUser", "IdPlan");

                    b.HasIndex("IdPlan");

                    b.ToTable("UserPlans");
                });

            modelBuilder.Entity("Share.Entities.BanckAccount", b =>
                {
                    b.HasOne("Share.Entities.Creator", "Creator")
                        .WithOne("BanckAccount")
                        .HasForeignKey("Share.Entities.BanckAccount", "CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Share.Entities.FinancialEntity", "FinancialEntity")
                        .WithMany("BanckAccounts")
                        .HasForeignKey("FinancialEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("FinancialEntity");
                });

            modelBuilder.Entity("Share.Entities.Benefit", b =>
                {
                    b.HasOne("Share.Entities.Plan", "Plan")
                        .WithMany("Benefits")
                        .HasForeignKey("IdPlan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Share.Entities.Chat", b =>
                {
                    b.HasOne("Share.Entities.Creator", "Creator")
                        .WithMany("Chats")
                        .HasForeignKey("IdCreator")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Share.Entities.User", "User")
                        .WithMany("Chats")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Share.Entities.ContentPlan", b =>
                {
                    b.HasOne("Share.Entities.Content", "Content")
                        .WithMany("ContentPlans")
                        .HasForeignKey("IdContent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Share.Entities.Plan", "Plan")
                        .WithMany("ContentPlans")
                        .HasForeignKey("IdPlan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Share.Entities.ContentTag", b =>
                {
                    b.HasOne("Share.Entities.Content", "Content")
                        .WithMany("ContentTags")
                        .HasForeignKey("IdContent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Share.Entities.Tag", "Tag")
                        .WithMany("ContentTags")
                        .HasForeignKey("IdTag")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Share.Entities.DefaultBenefit", b =>
                {
                    b.HasOne("Share.Entities.DefaultPlan", "DefaultPlan")
                        .WithMany("Benefits")
                        .HasForeignKey("IdDefaultPlan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DefaultPlan");
                });

            modelBuilder.Entity("Share.Entities.Message", b =>
                {
                    b.HasOne("Share.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("IdChat")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Share.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Share.Entities.PagoCreador", b =>
                {
                    b.HasOne("Share.Entities.Payment", "Payment")
                        .WithMany("GananciasCreador")
                        .HasForeignKey("IdPayment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Share.Entities.PagoPlataforma", b =>
                {
                    b.HasOne("Share.Entities.Payment", "Payment")
                        .WithMany("GananciasPlataforma")
                        .HasForeignKey("IdPayment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Share.Entities.Payment", b =>
                {
                    b.HasOne("Share.Entities.UserPlan", "UserPlan")
                        .WithMany("Payments")
                        .HasForeignKey("UserPlanIdP", "UserPlanIdU")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserPlan");
                });

            modelBuilder.Entity("Share.Entities.Plan", b =>
                {
                    b.HasOne("Share.Entities.Creator", "Creator")
                        .WithMany("Plans")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Share.Entities.User", b =>
                {
                    b.HasOne("Share.Entities.Creator", "Creator")
                        .WithOne("User")
                        .HasForeignKey("Share.Entities.User", "CreatorId");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Share.Entities.UserCreator", b =>
                {
                    b.HasOne("Share.Entities.Creator", "Creator")
                        .WithMany("UserCreators")
                        .HasForeignKey("IdCreator")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Share.Entities.User", "User")
                        .WithMany("UserCreators")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Share.Entities.UserPlan", b =>
                {
                    b.HasOne("Share.Entities.Plan", "Plan")
                        .WithMany("UserPlans")
                        .HasForeignKey("IdPlan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Share.Entities.User", "User")
                        .WithMany("UserPlans")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Share.Entities.Chat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Share.Entities.Content", b =>
                {
                    b.Navigation("ContentPlans");

                    b.Navigation("ContentTags");
                });

            modelBuilder.Entity("Share.Entities.Creator", b =>
                {
                    b.Navigation("BanckAccount");

                    b.Navigation("Chats");

                    b.Navigation("Plans");

                    b.Navigation("User");

                    b.Navigation("UserCreators");
                });

            modelBuilder.Entity("Share.Entities.DefaultPlan", b =>
                {
                    b.Navigation("Benefits");
                });

            modelBuilder.Entity("Share.Entities.FinancialEntity", b =>
                {
                    b.Navigation("BanckAccounts");
                });

            modelBuilder.Entity("Share.Entities.Payment", b =>
                {
                    b.Navigation("GananciasCreador");

                    b.Navigation("GananciasPlataforma");
                });

            modelBuilder.Entity("Share.Entities.Plan", b =>
                {
                    b.Navigation("Benefits");

                    b.Navigation("ContentPlans");

                    b.Navigation("UserPlans");
                });

            modelBuilder.Entity("Share.Entities.Tag", b =>
                {
                    b.Navigation("ContentTags");
                });

            modelBuilder.Entity("Share.Entities.User", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("Messages");

                    b.Navigation("UserCreators");

                    b.Navigation("UserPlans");
                });

            modelBuilder.Entity("Share.Entities.UserPlan", b =>
                {
                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
